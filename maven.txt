Maven常用命令	
	mvn -v		  	//查看mvn版本
	mvn -clean 	  	//删除项目的target文件夹
	mvn -compile	  	//编译项目
	mvn -test	  	//运行项目所有test方法，并生成target
	mvn -package	  	//将项目打包，放在target目录
	mvn -install	  	//将包安装至本地仓库，以让其它项目依赖
	mvn archetype:generate  //按照提示进行选择，创建mvn项目的文件夹
========================================================================================================



Maven基础知识
	Maven依赖坐标
		<groupId>com.immoc.maven01</groupId>		//域名.公司名.项目名
		<artifactId>maven01-model</artifactId>		//项目名.模块名
		<version>1.0.0</version>			//版本号


	Maven生命周期(三个生命周期相互独立，每个周期里面的阶段时相互依赖的)
		clean(清理项目)：
			pre-clean (执行清理前的工作) 
			clean (清理上一次构建生成的所有文件) 
			post-clean (执行清理后的工作)
		default(构建项目,一下列出常用的阶段)
			compile (编译项目源码)
			test (运行测试)
			package (将项目打包，放在target目录)
			install (将包安装至本地仓库，以让其它项目依赖。)
		site(生成项目站点)
			pre-site (执行生成站点文档之前需要完成的工作)
			site (生成项目的站点文档)
			post-site (执行生成站点文档之后需要完成的工作，并为部署做准备)
			site-deploy (将生成的站点文档部署到服务器上)



========================================================================================================



Maven Pom.xml
	<project>	//根元素
		<modelVersion></modelVersion>	//指定当前pom的版本
		<groupId></groupId>		//项目标识
		<artifactId></artifactId>	//模块名
		<version></version>		//0.0.0	大版本号.分支版本号.小版本号  snapshot快照 alpha 内测 beta公测 GA正式发布
		<type></type>			//
		<package></version>		//打包方式：jar(默认) zip pom
		<name></name>			//项目描述名
		<url></url>			//项目地址
		<description></description>	//项目描述
		<developers></developers>	//开发人员列表
		
 		<modules>					//聚合mvndemo1，mvndemo2，mvndemo3
        		<module>../mvndemo1</module>
        		<module>../mvndemo2</module>
        		<module>../mvndemo3</module>
   		 </modules>

		<dependencies>	//依赖列表
			<dependency>	//依赖
				<groupId></groupId>		//项目标识
				<artifactId></artifactId>	//模块名
				<type></type>
				<scope></scop>			//依赖作用范围,常用的是compile(默认，所有范围), provided(编译和测试), runtime(测试和运行),test(测试),system(编译和测试，可移植性差),import(导入范围),
				<optional></optional>		//设置依赖是否可选
				
				<exclusions>			//排除依赖
					<exclusion>
					
					</exclusion>
				</excusions>
			</dependency>
		</dependencies>	

		<dependencyManagement>
			<dependencies>
				
			</dependencies>
		</dependencyManagement>


		<build>
			<plugins>
				<plugin>
				</plugin>
			</plugins>
		</build>
		
		<parent>
		</parent>

		<modules>
		</modules>






